import { createSlice } from "@reduxjs/toolkit";

// Define the initial state for the cart
const initialCartState = {
  items: [], // Array to hold cart items
};

// Create a slice of the Redux store for managing the cart
const cartSlice = createSlice({
  name: "cart", // Name of the slice
  initialState: initialCartState, // Initial state for this slice
  reducers: {
    // Reducer to add a product to the cart
    addToCart: (state, action) => {
      const product = action.payload;
      state.items.push({
        id: product.id, // Product ID
        name: product.name, // Product name
        price: parseFloat(product.price.replace("$", "")), // Product price (formatted as a number)
        quantity: 1, // Initial quantity set to 1
        image: product.image, // Product image URL
      });
    },
    // Reducer to remove a product from the cart
    removeFromCart: (state, action) => {
      const productId = action.payload;
      state.items = state.items.filter(item => item.id !== productId); // Remove item by filtering out the product ID
    },
    // Reducer to update the quantity of a product in the cart
    updateCartItem: (state, action) => {
      const { productId, quantity } = action.payload;
      const item = state.items.find(item => item.id === productId); // Find the item by its ID
      if (item) {
        item.quantity = quantity; // Update the quantity
      }
    },
  },
});

// Export the actions generated by createSlice
export const { addToCart, removeFromCart, updateCartItem } = cartSlice.actions;

// Selector to get the list of cart items from the state
export const selectCartItems = (state) => state.cart.items;

// Selector to calculate the total price of items in the cart
export const selectCartTotal = (state) =>
  state.cart.items.reduce((total, item) => total + item.price * item.quantity, 0);

// Export the reducer to be used in the store
export default cartSlice.reducer;
